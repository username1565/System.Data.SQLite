###############################################################################
#
# shell.eagle --
#
# Extensible Adaptable Generalized Logic Engine (Eagle)
# Shell Initialization File
#
# Copyright (c) 2007-2012 by Joe Mistachkin.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: $
#
###############################################################################

#
# NOTE: Use our own namespace here because even though we do not directly
#       support namespaces ourselves, we do not want to pollute the global
#       namespace if this script actually ends up being evaluated in Tcl.
#
namespace eval ::Eagle {
  if {[isEagle]} then {
    ###########################################################################
    ############################ BEGIN Eagle ONLY #############################
    ###########################################################################

    #
    # NOTE: Commands specific to initializing the Eagle interactive shell
    #       environment should be placed here.
    #
    proc help { args } {
      # <help>
      # Displays interactive command help using the interactive "#help"
      # command.
      # </help>

      host result Break [appendArgs \
          "\nFor interactive help please use: #help " $args \
          "\nFor commercial support, please use: #support\n"]

      catch {
        object invoke Interpreter.GetActive Host.WriteLine \
            "\nPlease press any key to continue...\n"

        set key null; object invoke Interpreter.GetActive \
            Host.ReadKey true key
      }

      eval lappend command #help $args; debug icommand $command
    }

    proc #support {} {
      # <help>
      # Shows the requirements for obtaining commercial support and/or
      # redirects to the appropriate web site using the default browser.
      # </help>

      if {[catch {
        package require Licensing.Enterprise
        set fileName(1) [certificate current]

        if {[string length $fileName(1)] == 0} then {
          error "No certificate file is available."
        }

        set certificate [certificate import -alias $fileName(1)]

        if {[string length $certificate] == 0} then {
          error [appendArgs \
              "No certificate is available, current file \"" \
              $fileName(1) "\" could not be imported."]
        }

        if {[catch {
          certificate flags -hasflags S -hasall -strict $certificate
        } error(2)]} then {
          error [appendArgs \
              "Support is not enabled for certificate \"" \
              [$certificate Id] " - " [$certificate EntityName] \
              "\", the original error message was: \{" $error(2) \
              \}.]
        }

        set uri [$certificate -create -alias Support]

        if {[string length $uri] == 0} then {
          error [appendArgs \
              "No support information found in certificate \"" \
              [$certificate Id] " - " [$certificate EntityName] \".]
        }

        if {[$uri Scheme] ni [list http https]} then {
          error [appendArgs \
              "Support URI scheme \"" [$uri Scheme] \
              "\" in certificate \"" [$certificate Id] " - " \
              [$certificate EntityName] "\" is not supported, " \
              "must be \"http\" or \"https\"."]
        }

        exec -shell [$uri ToString] &
      } error(1)]} then {
        set fileName(2) [file tempname]; set fileData ""

        foreach varName [lsort [info vars]] {
          if {$varName in [list fileData]} then {
            continue
          }

          if {$varName eq "certificate" && \
              [string length $certificate] > 0} then {
            append fileData [appendArgs \n \
                [list array set certificate \
                [$certificate -flags +NonPublic \
                ToDictionary.KeysAndValuesToString \
                null false]]]

            continue
          }

          if {[array exists $varName]} then {
            append fileData [appendArgs \n \
                [list array set $varName [array get $varName]]]
          } else {
            append fileData [appendArgs \n \
                [list set $varName [set $varName]]]
          }
        }

        append fileData \n; writeFile $fileName(2) $fileData
        set ::eagle_shell(errorFileName) $fileName(2)

        error [appendArgs \
            "\n\nIn order to obtain commercial support, at least " \
            "one of the\nfollowing requirements must be met:\n\n" \
            "\t1. Valid, non-expired commercial license agreement\n" \
            "\t   for Eagle Enterprise Edition.\n\n" \
            "\t2. Valid, non-expired commercial support contract\n" \
            "\t   for Eagle Standard Edition.\n\n" \
            "The original error information was saved to the file:\n\n" \
            [string repeat - 60] \n $fileName(2) \n [string repeat - 60] \
            "\n\nPlease provide this file when contacting support."]
      }
    }

    ###########################################################################
    ############################# END Eagle ONLY ##############################
    ###########################################################################
  } else {
    ###########################################################################
    ############################# BEGIN Tcl ONLY ##############################
    ###########################################################################

    #
    # NOTE: Commands specific to initializing the Tcl interactive shell
    #       environment should be placed here.
    #

    ###########################################################################
    ############################## END Tcl ONLY ###############################
    ###########################################################################
  }

  #
  # NOTE: Provide the Eagle shell package to the interpreter.
  #
  package provide Eagle.Shell \
    [expr {[isEagle] ? [info engine PatchLevel] : "1.0"}]
}
